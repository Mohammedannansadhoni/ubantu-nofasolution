{{#if pageType}}
{{#eq pageType 'registration'}}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Web Page Editor</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: #f5f5f5;
    }

    .toolbar {
      display: flex;
      padding: 10px;
      background: #ffffff;
      border-bottom: 1px solid #ccc;
      gap: 10px;
      flex-wrap: wrap;
    }

    .toolbar select,
    .toolbar input[type="file"],
    .toolbar button {
      padding: 8px 12px;
      border: 1px solid #ccc;
      background-color: #fff;
      border-radius: 4px;
      cursor: pointer;
    }

    .page-wrapper {
      display: flex;
      flex-direction: column;
      margin: 20px;
      border: 2px solid #aaa;
      transition: all 0.3s ease;
    }

    /* Full-page mode - expands canvas to fill entire viewport */
    .page-wrapper.full-page-mode {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      margin: 0;
      border: none;
      z-index: 1000;
      background: transparent;
    }

    .page-wrapper.full-page-mode .toolbar {
      position: absolute;
      top: 10px;
      left: 10px;
      right: 10px;
      z-index: 1001;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 10px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    header, footer {
      background-color: #ffffff;
      padding: 20px;
      text-align: center;
      border-bottom: 1px solid #ccc;
      position: relative;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    footer {
      border-top: 1px solid #ccc;
      border-bottom: none;
      box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
    }

    /* Enhanced header styling */
    header .header-content {
      max-width: 1200px;
      margin: 0 auto;
    }

    header h1 {
      transition: all 0.3s ease;
    }

    header h1:hover {
      color: #667eea;
      transform: scale(1.02);
    }

    header p {
      transition: all 0.3s ease;
    }

    header p:hover {
      color: #333;
    }

    /* Enhanced footer styling */
    footer .footer-content {
      max-width: 1200px;
      margin: 0 auto;
    }

    footer p {
      transition: all 0.3s ease;
    }

    footer p:hover {
      color: #667eea;
    }

    /* Editable content styling */
    [contenteditable="true"] {
      outline: none;
      transition: all 0.3s ease;
      border-radius: 4px;
      padding: 2px 4px;
    }

    [contenteditable="true"]:hover {
      background: rgba(102, 126, 234, 0.1);
    }

    [contenteditable="true"]:focus {
      background: rgba(102, 126, 234, 0.15);
      box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.3);
    }

    .canvas-container {
      flex: 1;
      padding: 20px;
      min-height: 400px;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      background-color: #ffffff;
      transition: all 0.3s ease;
    }

    /* Full-page canvas styling */
    .page-wrapper.full-page-mode .canvas-container {
      width: 100vw;
      height: 100vh;
      padding: 0;
      margin: 0;
      min-height: 100vh;
      background-attachment: fixed;
    }

    .page-wrapper.full-page-mode .canvas-content {
      padding: 80px 20px 20px 20px; /* Top padding for toolbar */
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* Hide headers/footers in full-page mode */
    .page-wrapper.full-page-mode header,
    .page-wrapper.full-page-mode footer {
      display: none;
    }

    .canvas-content {
      padding: 20px;
      color: #000;
    }

    .resizable-logo-wrapper {
      display: inline-block;
      position: relative;
      resize: both;
      overflow: hidden;
      min-width: 50px;
      min-height: 50px;
      max-width: 90%;
      max-height: 300px;
      border: 2px dashed #ccc;
      margin: auto;
    }

    .resizable-logo-wrapper img {
      width: 100%;
      height: 100%;
      object-fit: contain;
      display: block;
    }

    .resizable-logo-wrapper::after {
      content: "Click to upload";
      position: absolute;
      bottom: 4px;
      right: 6px;
      font-size: 10px;
      color: #888;
    }

    .logo-upload {
      display: none;
    }

    .canvas-container *:focus {
      outline: 2px dashed blue;
    }

    /* Registration form styles */
    .registration-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    .registration-card {
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.18);
      padding: 48px 36px 36px 36px;
      max-width: 440px;
      width: 100%;
      border: 1.5px solid #e0e0e0;
    }

    .event-logo {
      max-width: 110px;
      margin: 0 auto 18px auto;
      display: block;
    }

    .event-title {
      font-size: 1.45rem;
      font-weight: 700;
      margin-bottom: 18px;
      text-align: center;
      color: #222;
    }

    .event-header {
      font-size: 1.1rem;
      font-weight: 500;
      text-align: center;
      margin-bottom: 18px;
      color: #333;
    }

    .registration-form label {
      font-weight: 500;
      margin-bottom: 4px;
      color: #222;
      display: block;
    }

    .registration-form input,
    .registration-form select {
      width: 100%;
      padding: 13px 14px;
      border: 1.5px solid #cfd8dc;
      border-radius: 7px;
      margin-bottom: 20px;
      font-size: 1.07rem;
      background: #f7fafd;
      transition: border 0.2s;
    }

    .registration-form input:focus,
    .registration-form select:focus {
      border: 1.5px solid #0a1931;
      outline: none;
    }

    .registration-form input[type="submit"] {
      background: #0a1931;
      color: #fff;
      border: none;
      border-radius: 7px;
      font-size: 1.13rem;
      font-weight: 700;
      padding: 14px 0;
      margin-top: 10px;
      letter-spacing: 0.5px;
      box-shadow: 0 2px 8px rgba(10, 25, 49, 0.08);
      transition: background 0.2s;
      cursor: pointer;
    }

    .registration-form input[type="submit"]:hover {
      background: #1a2951;
    }

    .registration-form .required {
      color: #d32f2f;
      margin-left: 2px;
    }

    .registration-form .form-note {
      font-size: 0.97em;
      color: #888;
      margin-bottom: 12px;
      text-align: left;
    }

    .event-footer {
      font-size: 1rem;
      text-align: center;
      margin-top: 22px;
      color: #666;
    }

    @media (max-width: 600px) {
      .registration-card {
        padding: 24px 8px 18px 8px;
        max-width: 98vw;
      }
    }

    /* Reorder mode styles - Creative Design */
    .form-field {
      position: relative;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* Toggle Button Styling */
    #toggleReorder {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 25px;
      padding: 10px 20px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    /* Full Page Toggle Button Styling */
    #toggleFullPage {
      background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
      color: white;
      border: none;
      border-radius: 25px;
      padding: 10px 20px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    #toggleFullPage:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
    }

    #toggleFullPage.active {
      background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
      box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

    #toggleFullPage::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }

    #toggleFullPage:hover::before {
      left: 100%;
    }

    /* Preview Button Styling */
    #previewRegistration {
      background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
      color: white;
      border: none;
      border-radius: 25px;
      padding: 10px 20px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    #previewRegistration:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
    }

    #previewRegistration::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }

    #previewRegistration:hover::before {
      left: 100%;
    }

    #toggleReorder:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
    }

    #toggleReorder.active {
      background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
      box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
    }

    #toggleReorder::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }

    #toggleReorder:hover::before {
      left: 100%;
    }

    /* Reorder Mode Active */
    .reorder-mode .form-field {
      background: linear-gradient(145deg, #ffffff 0%, #f8f9ff 100%);
      border: 2px solid #e3f2fd;
      border-radius: 16px;
      margin: 15px 0;
      padding: 20px;
      cursor: grab;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
      transform: translateZ(0);
      position: relative;
    }

    .reorder-mode .form-field:hover {
      border-color: #2196f3;
      box-shadow: 0 12px 35px rgba(33, 150, 243, 0.15);
      transform: translateY(-2px);
    }

    .reorder-mode .form-field.dragging {
      opacity: 0.9;
      transform: rotate(3deg) scale(1.02);
      z-index: 1000;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
      cursor: grabbing;
    }

    .reorder-mode .form-field.drag-over {
      border-color: #4caf50;
      background: linear-gradient(145deg, #e8f5e8 0%, #f1f8e9 100%);
      box-shadow: 0 12px 35px rgba(76, 175, 80, 0.2);
    }

    /* Creative Drag Handle */
    .reorder-mode .form-field::before {
      content: "";
      position: absolute;
      left: 15px;
      top: 50%;
      transform: translateY(-50%);
      width: 6px;
      height: 30px;
      background: linear-gradient(to bottom, #2196f3 0%, #64b5f6 50%, #2196f3 100%);
      border-radius: 3px;
      opacity: 0.7;
      box-shadow: 
        3px 0 0 rgba(33, 150, 243, 0.3),
        6px 0 0 rgba(33, 150, 243, 0.2);
    }

    /* Field Number Badge */
    .field-order-indicator {
      position: absolute;
      top: -10px;
      right: -10px;
      background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
      color: white;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      display: none;
      align-items: center;
      justify-content: center;
      font-size: 14px;
      font-weight: bold;
      border: 3px solid white;
      box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);
      z-index: 10;
      animation: bounceIn 0.6s ease;
    }

    @keyframes bounceIn {
      0% { transform: scale(0); }
      50% { transform: scale(1.2); }
      100% { transform: scale(1); }
    }

    .reorder-mode .field-order-indicator {
      display: flex;
    }

    /* Instructions Banner */
    .reorder-instructions {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 12px;
      padding: 18px 20px;
      margin: 20px 0;
      text-align: center;
      font-weight: 600;
      font-size: 14px;
      display: none;
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
      position: relative;
      overflow: hidden;
    }

    .reorder-instructions::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
      animation: shimmer 2s infinite;
    }

    @keyframes shimmer {
      0% { left: -100%; }
      100% { left: 100%; }
    }

    .reorder-mode .reorder-instructions {
      display: block;
      animation: slideDown 0.5s ease;
    }

    @keyframes slideDown {
      from { opacity: 0; transform: translateY(-20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    /* Disabled form inputs in reorder mode */
    .reorder-mode .registration-form input,
    .reorder-mode .registration-form select {
      pointer-events: none;
      background: linear-gradient(145deg, #f5f5f5 0%, #eeeeee 100%);
      opacity: 0.7;
    }

    /* Helper text for drag action */
    .reorder-mode .form-field::after {
      content: "Drag me ↕";
      position: absolute;
      right: 20px;
      top: 15px;
      font-size: 11px;
      color: #2196f3;
      background: rgba(33, 150, 243, 0.1);
      padding: 4px 8px;
      border-radius: 12px;
      border: 1px solid rgba(33, 150, 243, 0.2);
      font-weight: 500;
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0%, 100% { opacity: 0.7; }
      50% { opacity: 1; }
    }

    /* Success animation when dropping */
    .drop-success {
      animation: dropSuccess 0.6s ease;
    }

    @keyframes dropSuccess {
      0% { background: #4caf50; }
      100% { background: initial; }
    }
  </style>
</head>
<body>

  <!-- Toolbar -->
  <div class="toolbar">
    <select id="dropdown">
      <option value="">Select Option</option>
      <option value="header">Add Header</option>
      <option value="footer">Add Footer</option>
    </select>

    <input type="file" accept="image/*" id="uploadImg" title="Upload Background Image">

    <select id="alignment">
      <option value="">Align</option>
      <option value="left">Left</option>
      <option value="center">Center</option>
      <option value="right">Right</option>
    </select>

    <button id="toggleFullPage">🖼️ Full Page</button>
    <button id="setRequired">Required</button>
    <button id="previewRegistration">📋 Preview</button>
    <button id="toggleReorder">Reorder Fields</button>
    <button id="generatePublicUrl">🌐 Generate Public URL</button>
    <button id="saveNext">Save & Next</button>
  </div>

  <!-- Page Container -->
  <div class="page-wrapper" id="pageWrapper">

    <div class="canvas-container" id="canvas">
      <div class="canvas-content" contenteditable="false">
        <div class="registration-container">
          <div class="registration-card">
            <img src="https://via.placeholder.com/110x60?text=Logo" class="event-logo" alt="Event Logo" contenteditable="false">
            <div class="event-title" contenteditable="true">{{#if event.eventName}}{{event.eventName}}{{else}}Sample Event Name{{/if}}</div>
            <div class="event-header" contenteditable="true">Welcome to Our Event Registration</div>

            <form class="registration-form" action="/event/{{eventId}}/public-register" method="POST">
              <div class="reorder-instructions">
                ✨ Reorder Mode Active! Drag any field up or down to rearrange the form layout. Click "Exit Reorder Mode" when done.
              </div>
              
              {{#each fields}}
                <div class="form-field" data-field-name="{{this.fieldName}}" data-field-order="{{@index}}">
                  <div class="field-order-indicator">{{add @index 1}}</div>
                  {{formField this.fieldName this.fieldLabel this.fieldType this.fieldValue this.fieldMandatory ../badgeCategories this.dropdownOptions}}
                </div>
              {{/each}}

              <div class="form-note" contenteditable="true">Please provide the correct email address you would like to receive your confirmation email.</div>
              <input type="submit" value="REGISTER">
            </form>

            <div class="event-footer" contenteditable="true">Thank you for registering!</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- JavaScript -->
  <script>
    const dropdown = document.getElementById("dropdown");
    const canvas = document.getElementById("canvas");
    const wrapper = document.getElementById("pageWrapper");
    const registrationForm = document.querySelector(".registration-form");
    let selectedElement = null;
    let reorderMode = false;
    let draggedElement = null;
    let fullPageMode = false;

    document.addEventListener("click", function (e) {
      if (e.target.closest(".canvas-container")) {
        selectedElement = e.target;
      } else {
        selectedElement = null;
      }
    });

    // Full Page Mode Toggle
    document.getElementById("toggleFullPage").addEventListener("click", function () {
      fullPageMode = !fullPageMode;
      
      if (fullPageMode) {
        // Activate full-page mode
        this.textContent = "📱 Contained";
        this.classList.add("active");
        wrapper.classList.add("full-page-mode");
        document.body.style.overflow = "hidden"; // Prevent scrolling
        
        // Add escape key listener
        document.addEventListener("keydown", handleEscapeKey);
        
        showTooltip("Full-page mode activated! Press ESC to exit 🖼️");
        
        console.log("🖼️ Full-page mode activated");
        
      } else {
        // Deactivate full-page mode
        this.textContent = "🖼️ Full Page";
        this.classList.remove("active");
        wrapper.classList.remove("full-page-mode");
        document.body.style.overflow = "auto"; // Restore scrolling
        
        // Remove escape key listener
        document.removeEventListener("keydown", handleEscapeKey);
        
        showTooltip("Returned to contained mode 📱");
        
        console.log("📱 Contained mode activated");
      }
    });

    // Handle escape key to exit full-page mode
    function handleEscapeKey(e) {
      if (e.key === "Escape" && fullPageMode) {
        document.getElementById("toggleFullPage").click();
      }
    }

    document.getElementById("alignment").addEventListener("change", function () {
      if (selectedElement) {
        selectedElement.style.textAlign = this.value;
      } else {
        alert("Please click on an element inside the page.");
      }
      this.value = "";
    });

    document.getElementById("setRequired").addEventListener("click", function () {
      if (selectedElement && selectedElement.tagName === "INPUT") {
        selectedElement.required = !selectedElement.required;
        selectedElement.style.border = selectedElement.required ? "2px solid red" : "";
      } else {
        alert("Please select an input field to toggle 'required'.");
      }
    });

    // Generate Public URL functionality
    document.getElementById("generatePublicUrl").addEventListener("click", function () {
      const pathParts = window.location.pathname.split('/');
      const eventId = pathParts[pathParts.length - 1];
      
      // Save current canvas state first
      const fieldsOrder = getFieldsOrder();
      const canvasElement = document.getElementById("canvas");
      const canvasHtml = canvasElement.outerHTML;
      
      const eventTitle = document.querySelector(".event-title").textContent;
      const eventHeader = document.querySelector(".event-header").textContent;
      const eventFooter = document.querySelector(".event-footer").textContent;
      const logoSrc = document.querySelector(".event-logo").src;
      const backgroundImage = canvasElement.style.backgroundImage;
      
      const configData = {
        fieldsOrder: fieldsOrder,
        canvasHtml: canvasHtml,
        eventTitle: eventTitle,
        eventHeader: eventHeader,
        eventFooter: eventFooter,
        logoUrl: logoSrc !== "https://via.placeholder.com/110x60?text=Logo" ? logoSrc : null,
        customBackground: backgroundImage || null
      };
      
      console.log("🌐 Generating public registration URL...");
      this.innerHTML = "⏳ Generating...";
      this.disabled = true;
      
      // Save configuration using the new save-canvas route
      fetch(`/event/${eventId}/save-canvas`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(configData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.success && data.publicUrl) {
          // Show success with URL
          const fullUrl = window.location.origin + data.publicUrl;
          
          // Create a modal or tooltip to show the URL
          const urlModal = document.createElement('div');
          urlModal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
          `;
          
          urlModal.innerHTML = `
            <div style="
              background: white;
              padding: 30px;
              border-radius: 15px;
              max-width: 500px;
              width: 90%;
              text-align: center;
              box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            ">
              <h3 style="margin-bottom: 20px; color: #333;">🌐 Public Registration URL Generated!</h3>
              <p style="margin-bottom: 15px; color: #666;">Share this URL for public registration:</p>
              <div style="
                background: #f8f9fa;
                padding: 15px;
                border-radius: 8px;
                margin: 15px 0;
                border: 2px solid #e9ecef;
                word-break: break-all;
                font-family: monospace;
                font-size: 14px;
              ">${fullUrl}</div>
              <div style="display: flex; gap: 10px; justify-content: center; margin-top: 20px;">
                <button onclick="navigator.clipboard.writeText('${fullUrl}'); showTooltip('URL copied to clipboard! 📋')" style="
                  background: #28a745;
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  border-radius: 8px;
                  cursor: pointer;
                ">📋 Copy URL</button>
                <button onclick="window.open('${fullUrl}', '_blank')" style="
                  background: #007bff;
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  border-radius: 8px;
                  cursor: pointer;
                ">👁️ View Page</button>
                <button onclick="this.closest('div').parentElement.remove()" style="
                  background: #6c757d;
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  border-radius: 8px;
                  cursor: pointer;
                ">✖️ Close</button>
              </div>
            </div>
          `;
          
          document.body.appendChild(urlModal);
          showTooltip("Public registration URL generated successfully! 🎉");
        } else {
          alert(data.message || "Failed to generate public URL. Please try again.");
        }
        
        // Reset button
        this.innerHTML = "🌐 Generate Public URL";
        this.disabled = false;
      })
      .catch((error) => {
        console.error("Generate URL error:", error);
        alert("Failed to generate public URL. Please try again.");
        this.innerHTML = "🌐 Generate Public URL";
        this.disabled = false;
      });
    });

    // Preview Registration functionality - Enhanced to capture current canvas state
    document.getElementById("previewRegistration").addEventListener("click", function () {
      // Get event ID from URL
      const pathParts = window.location.pathname.split('/');
      const eventId = pathParts[pathParts.length - 1];
      
      console.log("🔍 Preparing preview for event:", eventId);
      
      // Show loading state
      this.innerHTML = "⏳ Capturing Canvas...";
      this.disabled = true;
      
      // Capture the current canvas state
      const canvasElement = document.getElementById("canvas");
      const canvasHtml = canvasElement.outerHTML;
      
      // Get current field order
      const fieldsOrder = getFieldsOrder();
      
      // Get current visual elements
      const eventTitle = document.querySelector(".event-title").textContent;
      const eventHeader = document.querySelector(".event-header").textContent;
      const eventFooter = document.querySelector(".event-footer").textContent;
      const logoSrc = document.querySelector(".event-logo").src;
      const backgroundImage = canvasElement.style.backgroundImage;
      
      // Prepare preview data payload
      const previewData = {
        canvasHtml: canvasHtml,
        fieldsOrder: fieldsOrder,
        eventTitle: eventTitle,
        eventHeader: eventHeader,
        eventFooter: eventFooter,
        logoSrc: logoSrc !== "https://via.placeholder.com/110x60?text=Logo" ? logoSrc : null,
        backgroundImage: backgroundImage || null
      };
      
      console.log("📸 Canvas captured for preview:", {
        hasCanvasHtml: !!previewData.canvasHtml,
        fieldsCount: fieldsOrder.length,
        title: eventTitle
      });
      
      // Send current canvas state for preview
      fetch(`/event/online-registration/${eventId}/preview`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(previewData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.text();
      })
      .then(previewHtml => {
        // Create preview window with the generated HTML
        const previewWindow = window.open('', '_blank', 'width=1200,height=800,scrollbars=yes,resizable=yes');
        
        if (previewWindow) {
          previewWindow.document.write(previewHtml);
          previewWindow.document.close();
          showTooltip("Live preview opened! 🚀");
        } else {
          alert("Please allow popups for this website to view the preview.");
        }
        
        // Reset button
        this.innerHTML = "📋 Preview";
        this.disabled = false;
      })
      .catch((error) => {
        console.error("Preview error:", error);
        alert("Failed to generate preview. Please try again.");
        this.innerHTML = "📋 Preview";
        this.disabled = false;
      });
    });

    // Toggle reorder mode with enhanced UX
    document.getElementById("toggleReorder").addEventListener("click", function () {
      reorderMode = !reorderMode;
      const formFields = document.querySelectorAll(".form-field");
      
      if (reorderMode) {
        // Activate reorder mode
        this.textContent = "✨ Exit Reorder Mode";
        this.classList.add("active");
        registrationForm.classList.add("reorder-mode");
        
        // Add a little celebration effect
        this.style.animation = "bounce 0.6s ease";
        setTimeout(() => this.style.animation = "", 600);
        
        // Enable drag and drop for form fields with staggered animation
        formFields.forEach((field, index) => {
          setTimeout(() => {
            field.draggable = true;
            field.addEventListener("dragstart", handleDragStart);
            field.addEventListener("dragover", handleDragOver);
            field.addEventListener("drop", handleDrop);
            field.addEventListener("dragend", handleDragEnd);
            
            // Update order indicators with animation delay
            const indicator = field.querySelector(".field-order-indicator");
            if (indicator) {
              indicator.textContent = index + 1;
              indicator.style.display = "flex";
              indicator.style.animationDelay = `${index * 0.1}s`;
            }
            
            // Add entrance animation
            field.style.animation = `slideInUp 0.5s ease ${index * 0.1}s both`;
          }, index * 100);
        });
        
        // Update all order indicators
        setTimeout(() => updateOrderIndicators(), formFields.length * 100);
        
        console.log("🎨 Creative reorder mode activated!", formFields.length, "fields ready");
        
        // Show helpful tooltip
        showTooltip("Drag fields up or down to reorder them!");
        
      } else {
        // Deactivate reorder mode
        this.textContent = "🔄 Reorder Fields";
        this.classList.remove("active");
        registrationForm.classList.remove("reorder-mode");
        
        // Disable drag and drop with exit animation
        formFields.forEach((field, index) => {
          field.draggable = false;
          field.removeEventListener("dragstart", handleDragStart);
          field.removeEventListener("dragover", handleDragOver);
          field.removeEventListener("drop", handleDrop);
          field.removeEventListener("dragend", handleDragEnd);
          
          // Hide order indicators with staggered animation
          const indicator = field.querySelector(".field-order-indicator");
          if (indicator) {
            setTimeout(() => {
              indicator.style.display = "none";
            }, index * 50);
          }
          
          // Reset field styles
          field.style.animation = "";
        });
        
        console.log("✅ Reorder mode deactivated - changes saved!");
        showTooltip("Field order saved successfully!");
      }
    });

    // Enhanced drag and drop handlers
    function handleDragStart(e) {
      draggedElement = this;
      this.classList.add("dragging");
      e.dataTransfer.effectAllowed = "move";
      e.dataTransfer.setData("text/html", this.outerHTML);
      
      // Add drag feedback sound effect (visual feedback)
      this.style.transform = "rotate(3deg) scale(1.02)";
    }

    function handleDragOver(e) {
      if (e.preventDefault) {
        e.preventDefault();
      }
      
      if (this !== draggedElement) {
        this.classList.add("drag-over");
        // Add subtle hover animation
        this.style.transform = "translateY(-2px)";
      }
      
      e.dataTransfer.dropEffect = "move";
      return false;
    }

    function handleDrop(e) {
      if (e.stopPropagation) {
        e.stopPropagation();
      }

      if (draggedElement !== this) {
        const allFields = Array.from(document.querySelectorAll(".form-field"));
        const draggedIndex = allFields.indexOf(draggedElement);
        const targetIndex = allFields.indexOf(this);
        
        // Add drop success animation
        this.classList.add("drop-success");
        setTimeout(() => this.classList.remove("drop-success"), 600);
        
        if (draggedIndex < targetIndex) {
          this.parentNode.insertBefore(draggedElement, this.nextSibling);
        } else {
          this.parentNode.insertBefore(draggedElement, this);
        }
        
        // Update order indicators with smooth animation
        updateOrderIndicators();
        
        // Show success feedback
        showTooltip("Field moved successfully! 🎉");
      }
      
      this.classList.remove("drag-over");
      this.style.transform = "";
      return false;
    }

    function handleDragEnd(e) {
      this.classList.remove("dragging");
      this.style.transform = "";
      
      // Remove drag-over class from all elements
      document.querySelectorAll(".form-field").forEach(field => {
        field.classList.remove("drag-over");
        field.style.transform = "";
      });
      
      draggedElement = null;
    }

    // Enhanced order indicator updates
    function updateOrderIndicators() {
      const formFields = document.querySelectorAll(".form-field");
      console.log("🔄 Updating order indicators for", formFields.length, "fields");
      
      formFields.forEach((field, index) => {
        const indicator = field.querySelector(".field-order-indicator");
        if (indicator) {
          // Animate number change
          indicator.style.transform = "scale(1.3)";
          indicator.style.background = "linear-gradient(135deg, #4caf50 0%, #45a049 100%)";
          
          setTimeout(() => {
            indicator.textContent = index + 1;
            indicator.style.transform = "scale(1)";
            indicator.style.background = "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)";
          }, 150);
          
          if (reorderMode) {
            indicator.style.display = "flex";
          }
        }
        field.dataset.fieldOrder = index;
      });
    }

    // Tooltip system for user feedback
    function showTooltip(message) {
      // Remove existing tooltip
      const existingTooltip = document.querySelector(".custom-tooltip");
      if (existingTooltip) {
        existingTooltip.remove();
      }
      
      // Create new tooltip
      const tooltip = document.createElement("div");
      tooltip.className = "custom-tooltip";
      tooltip.innerHTML = message;
      tooltip.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
        color: white;
        padding: 12px 20px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 14px;
        z-index: 10000;
        box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);
        animation: slideInRight 0.5s ease, slideOutRight 0.5s ease 2.5s;
        pointer-events: none;
      `;
      
      document.body.appendChild(tooltip);
      
      // Auto remove after 3 seconds
      setTimeout(() => {
        if (tooltip.parentNode) {
          tooltip.remove();
        }
      }, 3000);
    }

    // Add CSS animations for tooltips
    const style = document.createElement("style");
    style.textContent = `
      @keyframes bounce {
        0%, 20%, 60%, 100% { transform: translateY(0); }
        40% { transform: translateY(-10px); }
        80% { transform: translateY(-5px); }
      }
      
      @keyframes slideInUp {
        from { opacity: 0; transform: translateY(30px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      @keyframes slideInRight {
        from { opacity: 0; transform: translateX(100px); }
        to { opacity: 1; transform: translateX(0); }
      }
      
      @keyframes slideOutRight {
        from { opacity: 1; transform: translateX(0); }
        to { opacity: 0; transform: translateX(100px); }
      }
    `;
    document.head.appendChild(style);

    function getFieldsOrder() {
      const formFields = document.querySelectorAll(".form-field");
      return Array.from(formFields).map(field => ({
        fieldName: field.dataset.fieldName,
        order: parseInt(field.dataset.fieldOrder)
      }));
    }

    document.getElementById("saveNext").addEventListener("click", function () {
      // Get the current field order
      const fieldsOrder = getFieldsOrder();
      
      // Capture the complete canvas HTML as it appears in the editor
      const canvasElement = document.getElementById("canvas");
      const canvasHtml = canvasElement.outerHTML;
      
      // Get only essential configuration data
      const eventTitle = document.querySelector(".event-title").textContent;
      const eventHeader = document.querySelector(".event-header").textContent;
      const eventFooter = document.querySelector(".event-footer").textContent;
      const logoSrc = document.querySelector(".event-logo").src;
      
      // Get background image if any
      const backgroundImage = canvasElement.style.backgroundImage;
      
      // Get event ID from URL
      const pathParts = window.location.pathname.split('/');
      const eventId = pathParts[pathParts.length - 1];
      
      // Create comprehensive payload with canvas HTML
      const configData = {
        fieldsOrder: fieldsOrder,
        canvasHtml: canvasHtml, // Complete HTML from canvas
        eventTitle: eventTitle,
        eventHeader: eventHeader,
        eventFooter: eventFooter,
        logoSrc: logoSrc !== "https://via.placeholder.com/110x60?text=Logo" ? logoSrc : null,
        backgroundImage: backgroundImage || null
      };
      
      console.log("🚀 Sending complete canvas configuration:", {
        hasCanvasHtml: !!configData.canvasHtml,
        fieldsCount: fieldsOrder.length,
        eventTitle: eventTitle
      });
      
      // Send complete data to server
      fetch(`/event/online-registration/${eventId}/save-canvas`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          // CSRF token header if needed
        },
        body: JSON.stringify(configData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.success && data.redirectUrl) {
          // Show success message
          showTooltip("Canvas saved successfully! Moving to confirmation page... 🎉");
          setTimeout(() => {
            window.location.href = data.redirectUrl;
          }, 1000);
        } else {
          alert(data.message || "Failed to save. Please try again.");
        }
      })
      .catch((error) => {
        console.error("Save error:", error);
        if (error.message.includes("413")) {
          alert("Configuration data is too large. Please reduce background image size or complexity.");
        } else {
          alert("Failed to save. Please check your connection and try again.");
        }
      });
    });

    dropdown.addEventListener("change", function () {
      const value = dropdown.value;

      if (value === "header" && !document.querySelector("header")) {
        const header = document.createElement("header");

        header.innerHTML = `
          <div class="header-content" style="display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap;">
            <div class="resizable-logo-wrapper" id="logoWrapper" title="Click to upload logo" style="flex: 0 0 auto;">
              <img src="" alt="Logo" id="logoImage" style="display:none;">
              <input type="file" accept="image/*" class="logo-upload" id="logoInput">
            </div>
            <div class="header-text" style="flex: 1; text-align: center; padding: 0 20px;">
              <h1 contenteditable="true" style="margin: 0; font-size: 2rem; color: #333;">Event Header Title</h1>
              <p contenteditable="true" style="margin: 5px 0 0 0; color: #666;">Subtitle or additional information</p>
            </div>
            <div class="header-actions" style="flex: 0 0 auto;">
              <button onclick="this.closest('header').remove()" style="background: #dc3545; color: white; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer;">Remove Header</button>
            </div>
          </div>
        `;

        wrapper.insertBefore(header, wrapper.firstChild);

        const logoWrapper = header.querySelector("#logoWrapper");
        const logoInput = header.querySelector("#logoInput");
        const logoImage = header.querySelector("#logoImage");

        logoWrapper.addEventListener("click", () => logoInput.click());

        logoInput.addEventListener("change", (event) => {
          const file = event.target.files[0];
          if (file && file.type.startsWith("image/")) {
            // Check file size (limit to 2MB for logos)
            if (file.size > 2 * 1024 * 1024) {
              alert("Logo file is too large (max 2MB). Please choose a smaller image.");
              logoInput.value = '';
              return;
            }
            
            const reader = new FileReader();
            reader.onload = function (e) {
              const img = new Image();
              img.onload = function() {
                // Create canvas for logo compression
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                
                // Calculate new dimensions (max 400x200 for logos)
                let { width, height } = img;
                const maxWidth = 400;
                const maxHeight = 200;
                
                if (width > maxWidth || height > maxHeight) {
                  const ratio = Math.min(maxWidth / width, maxHeight / height);
                  width *= ratio;
                  height *= ratio;
                }
                
                canvas.width = width;
                canvas.height = height;
                
                // Draw and compress logo
                ctx.drawImage(img, 0, 0, width, height);
                const compressedDataUrl = canvas.toDataURL('image/png', 0.9); // 90% quality for logos
                
                logoImage.src = compressedDataUrl;
                logoImage.style.display = "block";
                logoWrapper.style.border = "none";
                
                showTooltip("Header logo uploaded and optimized! ✨");
              };
              img.src = e.target.result;
            };
            reader.readAsDataURL(file);
          }
        });
      }

      if (value === "footer" && !document.querySelector("footer")) {
        const footer = document.createElement("footer");
        footer.innerHTML = `
          <div class="footer-content" style="display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap;">
            <div class="footer-text" style="flex: 1; text-align: center;">
              <p contenteditable="true" style="margin: 0; font-size: 1.1rem; color: #333;">Event Footer Text</p>
              <p contenteditable="true" style="margin: 5px 0 0 0; font-size: 0.9rem; color: #666;">Additional footer information or contact details</p>
            </div>
            <div class="footer-actions" style="flex: 0 0 auto;">
              <button onclick="this.closest('footer').remove()" style="background: #dc3545; color: white; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer;">Remove Footer</button>
            </div>
          </div>
        `;
        wrapper.appendChild(footer);
        showTooltip("Footer added! Click on text to edit. ✏️");
      }

      dropdown.value = "";
    });

    document.getElementById("uploadImg").addEventListener("change", function (event) {
      const file = event.target.files[0];
      if (file && file.type.startsWith("image/")) {
        // Check file size (limit to 5MB)
        if (file.size > 5 * 1024 * 1024) {
          alert("Image file is too large (max 5MB). Please choose a smaller image or compress it.");
          this.value = '';
          return;
        }
        
        // Show upload progress
        showTooltip("📤 Uploading and optimizing image...");
        
        const reader = new FileReader();
        reader.onload = function (e) {
          const img = new Image();
          img.onload = function() {
            // Create canvas for image compression
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // Calculate new dimensions (max 1920x1080 for full-page backgrounds)
            let { width, height } = img;
            const maxWidth = 1920;
            const maxHeight = 1080;
            
            if (width > maxWidth || height > maxHeight) {
              const ratio = Math.min(maxWidth / width, maxHeight / height);
              width *= ratio;
              height *= ratio;
            }
            
            canvas.width = width;
            canvas.height = height;
            
            // Draw and compress image
            ctx.drawImage(img, 0, 0, width, height);
            const compressedDataUrl = canvas.toDataURL('image/jpeg', 0.8); // 80% quality
            
            // Set as background
            const canvasElement = document.getElementById("canvas");
            canvasElement.style.backgroundImage = `url('${compressedDataUrl}')`;
            
            // Auto-suggest full-page mode for better background viewing
            if (!fullPageMode) {
              setTimeout(() => {
                if (confirm("Background image uploaded! Would you like to switch to full-page mode for better viewing?")) {
                  document.getElementById("toggleFullPage").click();
                }
              }, 500);
            }
            
            showTooltip("Background image uploaded and optimized! 📷✨");
            console.log(`🖼️ Background image applied: ${width}x${height}px`);
          };
          img.src = e.target.result;
        };
        reader.readAsDataURL(file);
      } else {
        alert("Please select a valid image file.");
      }
    });

    // 🎨 CANVAS RESTORATION: Load saved design when page loads
    document.addEventListener('DOMContentLoaded', function() {
      console.log("🔄 Checking for saved canvas design...");
      
      {{#if savedCanvasHtml}}
        console.log("✅ Found saved canvas HTML, restoring design...");
        
        try {
          // Parse the saved canvas HTML
          const savedHtml = {{{json savedCanvasHtml}}};
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = savedHtml;
          
          // Extract the canvas content
          const savedCanvas = tempDiv.querySelector('#canvas');
          if (savedCanvas) {
            const currentCanvas = document.getElementById('canvas');
            
            // Preserve the background image
            const savedBackground = savedCanvas.style.backgroundImage;
            if (savedBackground && savedBackground !== 'none') {
              currentCanvas.style.backgroundImage = savedBackground;
              console.log("🖼️ Restored background image from saved design");
            }
            
            // Restore the inner content while preserving form functionality
            const savedContent = savedCanvas.querySelector('.canvas-content');
            if (savedContent) {
              const currentContent = currentCanvas.querySelector('.canvas-content');
              
              // Update text content from saved design
              const savedTitle = savedContent.querySelector('.event-title');
              const savedHeader = savedContent.querySelector('.event-header');
              const savedFooter = savedContent.querySelector('.event-footer');
              const savedLogo = savedContent.querySelector('.event-logo');
              
              if (savedTitle) {
                const currentTitle = currentContent.querySelector('.event-title');
                if (currentTitle) currentTitle.textContent = savedTitle.textContent;
              }
              
              if (savedHeader) {
                const currentHeader = currentContent.querySelector('.event-header');
                if (currentHeader) currentHeader.textContent = savedHeader.textContent;
              }
              
              if (savedFooter) {
                const currentFooter = currentContent.querySelector('.event-footer');
                if (currentFooter) currentFooter.textContent = savedFooter.textContent;
              }
              
              if (savedLogo && savedLogo.src && savedLogo.src !== 'https://via.placeholder.com/110x60?text=Logo') {
                const currentLogo = currentContent.querySelector('.event-logo');
                if (currentLogo) currentLogo.src = savedLogo.src;
              }
              
              console.log("🎨 Restored canvas content from saved design");
              showTooltip("Previous design restored! Your work is preserved. 🎉");
            }
          }
        } catch (error) {
          console.error("❌ Error restoring saved canvas:", error);
          console.log("ℹ️ Starting with default layout");
        }
      {{else}}
        console.log("ℹ️ No saved design found, starting fresh");
      {{/if}}
    });
  </script>

</body>
</html>
{{else}}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{#if pageType}}{{#eq pageType 'confirmation'}}Confirmation{{else}}Registration{{/eq}}{{else}}Registration{{/if}} Page Designer - {{event.eventName}}</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <style>
        body {
            background: #f5f5f5;
            font-family: Arial, sans-serif;
        }
        
        .designer-container {
            display: flex;
            height: 100vh;
        }
        
        .sidebar {
            width: 300px;
            background: white;
            border-right: 1px solid #ddd;
            overflow-y: auto;
        }
        
        .canvas-area {
            flex: 1;
            background: white;
            margin: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            position: relative;
            overflow: auto;
        }
        
        .canvas {
            min-height: 100%;
            padding: 40px;
            background: white;
        }
        
        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid #eee;
            background: #f9f9f9;
        }
        
        .component-group {
            border-bottom: 1px solid #eee;
        }
        
        .component-group-header {
            padding: 15px 20px;
            background: #f9f9f9;
            cursor: pointer;
            border: none;
            width: 100%;
            text-align: left;
            font-weight: bold;
        }
        
        .component-group-content {
            padding: 10px;
            display: none;
        }
        
        .component-group.active .component-group-content {
            display: block;
        }
        
        .component-item {
            display: block;
            width: 100%;
            padding: 10px 15px;
            margin: 5px 0;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
            text-align: left;
            border-radius: 4px;
            transition: all 0.2s;
        }
        
        .component-item:hover {
            background: #f0f0f0;
            border-color: #007bff;
        }
        
        .save-controls {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }
        
        .droppable-area {
            min-height: 50px;
            margin: 10px 0;
            border: 2px dashed #ddd;
            border-radius: 4px;
            padding: 20px;
            text-align: center;
            color: #999;
            transition: all 0.2s;
        }
        
        .droppable-area.drag-over {
            border-color: #007bff;
            background: #f0f8ff;
        }
        
        .canvas-element {
            margin: 10px 0;
            position: relative;
            border: 1px solid transparent;
            padding: 10px;
            border-radius: 4px;
        }
        
        .canvas-element:hover {
            border-color: #007bff;
        }
        
        .canvas-element.selected {
            border-color: #007bff;
            background: #f8f9fa;
        }
        
        .element-controls {
            position: absolute;
            top: -30px;
            right: 0;
            background: #007bff;
            border-radius: 4px;
            padding: 5px;
            display: none;
        }
        
        .canvas-element:hover .element-controls,
        .canvas-element.selected .element-controls {
            display: block;
        }
        
        .element-controls button {
            background: transparent;
            border: none;
            color: white;
            padding: 2px 5px;
            cursor: pointer;
            font-size: 12px;
        }
        
        .properties-panel {
            position: fixed;
            right: 20px;
            top: 100px;
            width: 280px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            display: none;
            max-height: 70vh;
            overflow-y: auto;
            z-index: 999;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .form-control {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        /* Workflow Styles */
        .workflow-info {
            padding: 10px;
            background: #f8f9fa;
            border-radius: 6px;
            margin-bottom: 10px;
        }
        
        .workflow-steps {
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin-top: 10px;
        }
        
        .step {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background: #f8f9fa;
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .step.active {
            background: #007bff;
            color: white;
            border-color: #007bff;
        }
        
        .save-controls {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: white;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            z-index: 1000;
        }
        
        .save-controls .btn {
            margin-right: 10px;
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <div class="designer-container">
        <!-- Sidebar with components -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h4>Page Elements</h4>
                <p class="text-muted">Drag elements to the canvas</p>
            </div>
            
            <!-- Page Layout -->
            <div class="component-group active">
                <button class="component-group-header">
                    <i class="fa fa-layout"></i> Page Layout
                </button>
                <div class="component-group-content">
                    <button class="component-item" data-component="header">
                        <i class="fa fa-header"></i> Header Section
                    </button>
                    <button class="component-item" data-component="container">
                        <i class="fa fa-square-o"></i> Container
                    </button>
                    <button class="component-item" data-component="row">
                        <i class="fa fa-columns"></i> Row
                    </button>
                    <button class="component-item" data-component="column">
                        <i class="fa fa-column"></i> Column
                    </button>
                </div>
            </div>
            
            <!-- Content Elements -->
            <div class="component-group">
                <button class="component-group-header">
                    <i class="fa fa-text-width"></i> Content
                </button>
                <div class="component-group-content">
                    <button class="component-item" data-component="heading">
                        <i class="fa fa-header"></i> Heading
                    </button>
                    <button class="component-item" data-component="text">
                        <i class="fa fa-paragraph"></i> Text Block
                    </button>
                    <button class="component-item" data-component="image">
                        <i class="fa fa-image"></i> Image
                    </button>
                    <button class="component-item" data-component="divider">
                        <i class="fa fa-minus"></i> Divider
                    </button>
                </div>
            </div>
            
            <!-- Form Elements -->
            <div class="component-group">
                <button class="component-group-header">
                    <i class="fa fa-wpforms"></i> Registration Form
                </button>
                <div class="component-group-content">
                    <button class="component-item" data-component="form-start">
                        <i class="fa fa-play"></i> Form Start
                    </button>
                    {{#each event.eventFields}}
                    {{#if showInOnlineRegistration}}
                    <button class="component-item" data-component="form-field" data-field-id="{{_id}}" data-field-type="{{fieldType}}">
                        <i class="fa fa-{{#eq fieldType 'text'}}font{{/eq}}{{#eq fieldType 'email'}}envelope{{/eq}}{{#eq fieldType 'number'}}hashtag{{/eq}}{{#eq fieldType 'select'}}list{{/eq}}{{#eq fieldType 'textarea'}}align-left{{/eq}}{{#eq fieldType 'checkbox'}}check-square{{/eq}}{{#eq fieldType 'radio'}}dot-circle-o{{/eq}}{{#eq fieldType 'date'}}calendar{{/eq}}{{#eq fieldType 'file'}}upload{{/eq}}"></i> {{fieldName}}
                    </button>
                    {{/if}}
                    {{/each}}
                    <button class="component-item" data-component="submit-button">
                        <i class="fa fa-paper-plane"></i> Submit Button
                    </button>
                </div>
            </div>
            
            <!-- Workflow Navigation -->
            <div class="component-group">
                <button class="component-group-header">
                    <i class="fa fa-flow-chart"></i> Workflow
                </button>
                <div class="component-group-content">
                    <div class="workflow-info">
                        <p><strong>Current Step:</strong> 
                        {{#if pageType}}
                            {{#eq pageType 'confirmation'}}2 of 3 - Confirmation Page{{/eq}}
                            {{#eq pageType 'email'}}3 of 3 - Email Configuration{{/eq}}
                        {{else}}
                            1 of 3 - Registration Page
                        {{/if}}
                        </p>
                        <div class="workflow-steps">
                            <div class="step {{#unless pageType}}active{{/unless}}">
                                <i class="fa fa-edit"></i> Registration
                            </div>
                            <div class="step {{#eq pageType 'confirmation'}}active{{/eq}}">
                                <i class="fa fa-check-circle"></i> Confirmation
                            </div>
                            <div class="step {{#eq pageType 'email'}}active{{/eq}}">
                                <i class="fa fa-envelope"></i> Email Config
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Canvas Area -->
        <div class="canvas-area">
            <div class="canvas" id="canvas">
                <div class="droppable-area" id="main-drop-area">
                    <i class="fa fa-plus-circle"></i><br>
                    Drag elements here to start building your registration page
                </div>
            </div>
        </div>
    </div>
    
    <!-- Save Controls -->
    <div class="save-controls">
        <button class="btn btn-info" id="preview-btn">
            <i class="fa fa-eye"></i> Preview
        </button>
        
        {{#if pageType}}
            {{#eq pageType 'confirmation'}}
                <button class="btn btn-warning" onclick="window.location.href='/event/online-registration/{{eventId}}/design-registration'">
                    <i class="fa fa-arrow-left"></i> Back to Registration
                </button>
                <button class="btn btn-success" id="save-next-btn">
                    <i class="fa fa-save"></i> Save & Next (Email Config)
                </button>
            {{/eq}}
            {{#eq pageType 'email'}}
                <button class="btn btn-warning" onclick="window.location.href='/event/online-registration/{{eventId}}/design-confirmation'">
                    <i class="fa fa-arrow-left"></i> Back to Confirmation
                </button>
                <button class="btn btn-success" id="generate-link-btn">
                    <i class="fa fa-link"></i> Generate Public Link
                </button>
            {{/eq}}
        {{else}}
            <button class="btn btn-success" id="save-next-btn">
                <i class="fa fa-save"></i> Save & Next (Confirmation)
            </button>
        {{/if}}
        
        <button class="btn btn-primary" id="save-btn">
            <i class="fa fa-save"></i> Save Draft
        </button>
        <button class="btn btn-secondary" onclick="window.location.href='/event/online-registration/{{eventId}}'">
            <i class="fa fa-times"></i> Exit Designer
        </button>
    </div>
    
    <!-- Properties Panel -->
    <div class="properties-panel" id="properties-panel">
        <h5>Element Properties</h5>
        <div id="properties-content">
            <!-- Properties will be loaded here -->
        </div>
        <button class="btn btn-primary btn-sm" id="apply-properties">Apply Changes</button>
        <button class="btn btn-secondary btn-sm" onclick="closePropertiesPanel()">Cancel</button>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        let selectedElement = null;
        let elementCounter = 0;
        
        $(document).ready(function() {
            initializeDesigner();
        });
        
        function initializeDesigner() {
            // Toggle component groups
            $('.component-group-header').click(function() {
                $(this).parent().toggleClass('active');
            });
            
            // Make components draggable
            $('.component-item').draggable({
                helper: 'clone',
                revert: 'invalid',
                start: function(event, ui) {
                    ui.helper.css('z-index', 1000);
                }
            });
            
            // Make canvas droppable
            $('#canvas').droppable({
                accept: '.component-item',
                drop: function(event, ui) {
                    addElement(ui.draggable.data('component'), ui.draggable, ui.position);
                }
            });
            
            // Save functionality
            $('#save-btn').click(saveDesign);
            $('#preview-btn').click(previewPage);
        }
        
        function addElement(componentType, source, position) {
            elementCounter++;
            let elementId = componentType + '_' + elementCounter;
            let element = createElementHTML(componentType, elementId, source);
            
            if (element) {
                // Remove the placeholder if it exists
                $('#main-drop-area').hide();
                
                // Add element to canvas
                $('#canvas').append(element);
                
                // Make element selectable and editable
                setupElementInteractions(elementId);
            }
        }
        
        function createElementHTML(type, id, source) {
            let html = '';
            
            switch(type) {
                case 'header':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="header">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <div class="page-header text-center">
                                <h1>{{event.eventName}}</h1>
                                <p class="lead">Event Registration</p>
                            </div>
                        </div>
                    `;
                    break;
                    
                case 'heading':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="heading">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <h2>Heading Text</h2>
                        </div>
                    `;
                    break;
                    
                case 'text':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="text">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <p>This is a text block. Click to edit the content.</p>
                        </div>
                    `;
                    break;
                    
                case 'image':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="image">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <img src="/images/logo.png" alt="Image" class="img-responsive" style="max-width: 200px;">
                        </div>
                    `;
                    break;
                    
                case 'form-start':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="form-start">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <form action="/event/register/{{event._id}}" method="POST" enctype="multipart/form-data">
                                <div class="form-header">
                                    <h3>Registration Form</h3>
                                    <p>Please fill in all required fields</p>
                                </div>
                        </div>
                    `;
                    break;
                    
                case 'form-field':
                    let fieldId = source.data('field-id');
                    let fieldType = source.data('field-type');
                    let fieldName = source.text().replace(/^\s*\S+\s*/, ''); // Remove icon
                    
                    html = `
                        <div class="canvas-element" id="${id}" data-type="form-field" data-field-id="${fieldId}">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <div class="form-group">
                                <label for="field_${fieldId}">${fieldName}</label>
                                ${generateFieldHTML(fieldType, fieldId, fieldName)}
                            </div>
                        </div>
                    `;
                    break;
                    
                case 'submit-button':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="submit-button">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <div class="form-group text-center">
                                <button type="submit" class="btn btn-primary btn-lg">Register Now</button>
                            </div>
                            </form>
                        </div>
                    `;
                    break;
                    
                case 'container':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="container">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <div class="container">
                                <div class="droppable-area">Drop elements here</div>
                            </div>
                        </div>
                    `;
                    break;
                    
                default:
                    return null;
            }
            
            return $(html);
        }
        
        function generateFieldHTML(fieldType, fieldId, fieldName) {
            switch(fieldType) {
                case 'text':
                    return `<input type="text" class="form-control" name="field_${fieldId}" id="field_${fieldId}">`;
                case 'email':
                    return `<input type="email" class="form-control" name="field_${fieldId}" id="field_${fieldId}">`;
                case 'number':
                    return `<input type="number" class="form-control" name="field_${fieldId}" id="field_${fieldId}">`;
                case 'textarea':
                    return `<textarea class="form-control" name="field_${fieldId}" id="field_${fieldId}" rows="3"></textarea>`;
                case 'select':
                    return `<select class="form-control" name="field_${fieldId}" id="field_${fieldId}">
                                <option value="">Select an option</option>
                                <option value="option1">Option 1</option>
                                <option value="option2">Option 2</option>
                            </select>`;
                case 'date':
                    return `<input type="date" class="form-control" name="field_${fieldId}" id="field_${fieldId}">`;
                case 'file':
                    return `<input type="file" class="form-control" name="field_${fieldId}" id="field_${fieldId}">`;
                default:
                    return `<input type="text" class="form-control" name="field_${fieldId}" id="field_${fieldId}">`;
            }
        }
        
        function setupElementInteractions(elementId) {
            $(`#${elementId}`).click(function(e) {
                e.stopPropagation();
                selectElement(elementId);
            });
        }
        
        function selectElement(elementId) {
            $('.canvas-element').removeClass('selected');
            $(`#${elementId}`).addClass('selected');
            selectedElement = elementId;
        }
        
        function editElement(elementId) {
            selectElement(elementId);
            showPropertiesPanel(elementId);
        }
        
        function deleteElement(elementId) {
            if (confirm('Are you sure you want to delete this element?')) {
                $(`#${elementId}`).remove();
                closePropertiesPanel();
            }
        }
        
        function showPropertiesPanel(elementId) {
            let element = $(`#${elementId}`);
            let type = element.data('type');
            let content = generatePropertiesHTML(type, elementId);
            
            $('#properties-content').html(content);
            $('#properties-panel').show();
        }
        
        function closePropertiesPanel() {
            $('#properties-panel').hide();
            selectedElement = null;
        }
        
        function generatePropertiesHTML(type, elementId) {
            switch(type) {
                case 'heading':
                    let currentText = $(`#${elementId} h2`).text();
                    return `
                        <div class="form-group">
                            <label>Heading Text</label>
                            <input type="text" class="form-control" id="prop-text" value="${currentText}">
                        </div>
                        <div class="form-group">
                            <label>Heading Size</label>
                            <select class="form-control" id="prop-size">
                                <option value="h1">H1 - Largest</option>
                                <option value="h2" selected>H2 - Large</option>
                                <option value="h3">H3 - Medium</option>
                                <option value="h4">H4 - Small</option>
                            </select>
                        </div>
                    `;
                case 'text':
                    let textContent = $(`#${elementId} p`).text();
                    return `
                        <div class="form-group">
                            <label>Text Content</label>
                            <textarea class="form-control" id="prop-text" rows="4">${textContent}</textarea>
                        </div>
                    `;
                case 'image':
                    return `
                        <div class="form-group">
                            <label>Image URL</label>
                            <input type="text" class="form-control" id="prop-src" value="${$(`#${elementId} img`).attr('src')}">
                        </div>
                        <div class="form-group">
                            <label>Alt Text</label>
                            <input type="text" class="form-control" id="prop-alt" value="${$(`#${elementId} img`).attr('alt')}">
                        </div>
                    `;
                default:
                    return '<p>No properties available for this element.</p>';
            }
        }
        
        function saveDesign() {
            let design = $('#canvas').html();
            
            $.ajax({
                url: '/event/online-registration/{{eventId}}/save-design',
                method: 'POST',
                data: {
                    type: 'registration',
                    design: design
                },
                success: function(response) {
                    if (response.success) {
                        alert('Design saved successfully!');
                    } else {
                        alert('Error saving design: ' + response.error);
                    }
                },
                error: function() {
                    alert('Network error occurred while saving');
                }
            });
        }
        
        function previewPage() {
            let design = $('#canvas').html();
            let previewWindow = window.open('', '_blank');
            previewWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Registration Preview</title>
                    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/3.3.7/css/bootstrap.min.css">
                </head>
                <body>
                    <div class="container">
                        ${design}
                    </div>
                </body>
                </html>
            `);
        }
        
        // Apply properties changes
        $('#apply-properties').click(function() {
            if (!selectedElement) return;
            
            let element = $(`#${selectedElement}`);
            let type = element.data('type');
            
            switch(type) {
                case 'heading':
                    let text = $('#prop-text').val();
                    let size = $('#prop-size').val();
                    element.find('h1, h2, h3, h4').replaceWith(`<${size}>${text}</${size}>`);
                    break;
                case 'text':
                    element.find('p').text($('#prop-text').val());
                    break;
                case 'image':
                    element.find('img').attr('src', $('#prop-src').val()).attr('alt', $('#prop-alt').val());
                    break;
            }
            
            closePropertiesPanel();
        });
        
        // Close properties panel when clicking outside
        $(document).click(function(e) {
            if (!$(e.target).closest('#properties-panel, .canvas-element').length) {
                closePropertiesPanel();
            }
        });
        
        // Save & Next Workflow
        $('#save-next-btn').click(function() {
            let design = $('#canvas').html();
            let pageType = '{{pageType}}' || 'registration';
            let eventId = '{{eventId}}';
            
            $.ajax({
                url: `/event/online-registration/${eventId}/save-design`,
                method: 'POST',
                data: {
                    pageType: pageType,
                    pageContent: design,
                    nextStep: true
                },
                success: function(response) {
                    if (response.success) {
                        // Determine next step
                        let nextUrl;
                        if (pageType === 'registration' || !pageType) {
                            nextUrl = `/event/online-registration/${eventId}/design-confirmation`;
                        } else if (pageType === 'confirmation') {
                            nextUrl = `/event/online-registration/${eventId}/email-config`;
                        }
                        
                        if (nextUrl) {
                            alert('Page saved successfully! Moving to next step...');
                            window.location.href = nextUrl;
                        }
                    } else {
                        alert('Error saving design: ' + (response.message || 'Unknown error'));
                    }
                },
                error: function() {
                    alert('Error saving design. Please try again.');
                }
            });
        });
        
        // Generate Link functionality
        $('#generate-link-btn').click(function() {
            let eventId = '{{eventId}}';
            
            $.ajax({
                url: `/event/online-registration/${eventId}/generate-link`,
                method: 'POST',
                success: function(response) {
                    if (response.success && response.publicUrl) {
                        // Show the generated link
                        let fullUrl = window.location.origin + response.publicUrl;
                        
                        let linkHtml = `
                            <div class="alert alert-success">
                                <h4><i class="fa fa-link"></i> Public Registration Link Generated!</h4>
                                <p><strong>Your live registration page is ready:</strong></p>
                                <div style="background: #f8f9fa; padding: 10px; border-radius: 4px; margin: 10px 0;">
                                    <input type="text" value="${fullUrl}" readonly style="width: 100%; padding: 8px; border: 1px solid #ddd;" onclick="this.select()">
                                </div>
                                <p><small>
                                    <i class="fa fa-info-circle"></i> 
                                    This link includes your custom registration page, confirmation page, and email configuration.
                                    All assets (images, backgrounds) are saved in the event folder.
                                </small></p>
                                <button class="btn btn-primary" onclick="window.open('${fullUrl}', '_blank')">
                                    <i class="fa fa-external-link"></i> Open Registration Page
                                </button>
                                <button class="btn btn-info" onclick="navigator.clipboard.writeText('${fullUrl}').then(() => alert('Link copied to clipboard!'))">
                                    <i class="fa fa-copy"></i> Copy Link
                                </button>
                            </div>
                        `;
                        
                        // Show modal or replace canvas content
                        $('#canvas').html(linkHtml);
                    } else {
                        alert('Error generating link: ' + (response.message || 'Unknown error'));
                    }
                },
                error: function() {
                    alert('Error generating link. Please try again.');
                }
            });
        });
        
        // Preview functionality
        $('#preview-btn').click(function() {
            let design = $('#canvas').html();
            let previewWindow = window.open('', '_blank', 'width=800,height=600');
            
            let previewContent = `
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Preview - {{event.eventName}}</title>
                    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/3.3.7/css/bootstrap.min.css">
                    <style>
                        body { padding: 20px; background: #f5f5f5; }
                        .preview-container { background: white; padding: 40px; border-radius: 8px; }
                    </style>
                </head>
                <body>
                    <div class="preview-container">
                        ${design}
                    </div>
                </body>
                </html>
            `;
            
            previewWindow.document.write(previewContent);
            previewWindow.document.close();
        });
    </script>
</body>
</html>
{{/eq}}
{{else}}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registration Page Designer - {{event.eventName}}</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <style>
        body {
            background: #f5f5f5;
            font-family: Arial, sans-serif;
        }
        
        .designer-container {
            display: flex;
            height: 100vh;
        }
        
        .sidebar {
            width: 300px;
            background: white;
            border-right: 1px solid #ddd;
            overflow-y: auto;
        }
        
        .canvas-area {
            flex: 1;
            background: white;
            margin: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            position: relative;
            overflow: auto;
        }
        
        .canvas {
            min-height: 100%;
            padding: 40px;
            background: white;
        }
        
        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid #eee;
            background: #f9f9f9;
        }
        
        .component-group {
            border-bottom: 1px solid #eee;
        }
        
        .component-group-header {
            padding: 15px 20px;
            background: #f9f9f9;
            cursor: pointer;
            border: none;
            width: 100%;
            text-align: left;
            font-weight: bold;
        }
        
        .component-group-content {
            padding: 10px;
            display: none;
        }
        
        .component-group.active .component-group-content {
            display: block;
        }
        
        .component-item {
            display: block;
            width: 100%;
            padding: 10px 15px;
            margin: 5px 0;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
            text-align: left;
            border-radius: 4px;
            transition: all 0.2s;
        }
        
        .component-item:hover {
            background: #f0f0f0;
            border-color: #007bff;
        }
        
        .save-controls {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }
        
        .droppable-area {
            min-height: 50px;
            margin: 10px 0;
            border: 2px dashed #ddd;
            border-radius: 4px;
            padding: 20px;
            text-align: center;
            color: #999;
            transition: all 0.2s;
        }
        
        .droppable-area.drag-over {
            border-color: #007bff;
            background: #f0f8ff;
        }
        
        .canvas-element {
            margin: 10px 0;
            position: relative;
            border: 1px solid transparent;
            padding: 10px;
            border-radius: 4px;
        }
        
        .canvas-element:hover {
            border-color: #007bff;
        }
        
        .canvas-element.selected {
            border-color: #007bff;
            background: #f8f9fa;
        }
        
        .element-controls {
            position: absolute;
            top: -30px;
            right: 0;
            background: #007bff;
            border-radius: 4px;
            padding: 5px;
            display: none;
        }
        
        .canvas-element:hover .element-controls,
        .canvas-element.selected .element-controls {
            display: block;
        }
        
        .element-controls button {
            background: transparent;
            border: none;
            color: white;
            padding: 2px 5px;
            cursor: pointer;
            font-size: 12px;
        }
        
        .properties-panel {
            position: fixed;
            right: 20px;
            top: 100px;
            width: 280px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            display: none;
            max-height: 70vh;
            overflow-y: auto;
            z-index: 999;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .form-control {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        /* Workflow Styles */
        .workflow-info {
            padding: 10px;
            background: #f8f9fa;
            border-radius: 6px;
            margin-bottom: 10px;
        }
        
        .workflow-steps {
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin-top: 10px;
        }
        
        .step {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background: #f8f9fa;
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .step.active {
            background: #007bff;
            color: white;
            border-color: #007bff;
        }
        
        .save-controls {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: white;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            z-index: 1000;
        }
        
        .save-controls .btn {
            margin-right: 10px;
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <div class="designer-container">
        <!-- Sidebar with components -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h4>Page Elements</h4>
                <p class="text-muted">Drag elements to the canvas</p>
            </div>
            
            <!-- Page Layout -->
            <div class="component-group active">
                <button class="component-group-header">
                    <i class="fa fa-layout"></i> Page Layout
                </button>
                <div class="component-group-content">
                    <button class="component-item" data-component="header">
                        <i class="fa fa-header"></i> Header Section
                    </button>
                    <button class="component-item" data-component="container">
                        <i class="fa fa-square-o"></i> Container
                    </button>
                    <button class="component-item" data-component="row">
                        <i class="fa fa-columns"></i> Row
                    </button>
                    <button class="component-item" data-component="column">
                        <i class="fa fa-column"></i> Column
                    </button>
                </div>
            </div>
            
            <!-- Content Elements -->
            <div class="component-group">
                <button class="component-group-header">
                    <i class="fa fa-text-width"></i> Content
                </button>
                <div class="component-group-content">
                    <button class="component-item" data-component="heading">
                        <i class="fa fa-header"></i> Heading
                    </button>
                    <button class="component-item" data-component="text">
                        <i class="fa fa-paragraph"></i> Text Block
                    </button>
                    <button class="component-item" data-component="image">
                        <i class="fa fa-image"></i> Image
                    </button>
                    <button class="component-item" data-component="divider">
                        <i class="fa fa-minus"></i> Divider
                    </button>
                </div>
            </div>
            
            <!-- Form Elements -->
            <div class="component-group">
                <button class="component-group-header">
                    <i class="fa fa-wpforms"></i> Registration Form
                </button>
                <div class="component-group-content">
                    <button class="component-item" data-component="form-start">
                        <i class="fa fa-play"></i> Form Start
                    </button>
                    {{#each event.eventFields}}
                    {{#if showInOnlineRegistration}}
                    <button class="component-item" data-component="form-field" data-field-id="{{_id}}" data-field-type="{{fieldType}}">
                        <i class="fa fa-{{#eq fieldType 'text'}}font{{/eq}}{{#eq fieldType 'email'}}envelope{{/eq}}{{#eq fieldType 'number'}}hashtag{{/eq}}{{#eq fieldType 'select'}}list{{/eq}}{{#eq fieldType 'textarea'}}align-left{{/eq}}{{#eq fieldType 'checkbox'}}check-square{{/eq}}{{#eq fieldType 'radio'}}dot-circle-o{{/eq}}{{#eq fieldType 'date'}}calendar{{/eq}}{{#eq fieldType 'file'}}upload{{/eq}}"></i> {{fieldName}}
                    </button>
                    {{/if}}
                    {{/each}}
                    <button class="component-item" data-component="submit-button">
                        <i class="fa fa-paper-plane"></i> Submit Button
                    </button>
                </div>
            </div>
            
            <!-- Workflow Navigation -->
            <div class="component-group">
                <button class="component-group-header">
                    <i class="fa fa-flow-chart"></i> Workflow
                </button>
                <div class="component-group-content">
                    <div class="workflow-info">
                        <p><strong>Current Step:</strong> 
                        {{#if pageType}}
                            {{#eq pageType 'confirmation'}}2 of 3 - Confirmation Page{{/eq}}
                            {{#eq pageType 'email'}}3 of 3 - Email Configuration{{/eq}}
                        {{else}}
                            1 of 3 - Registration Page
                        {{/if}}
                        </p>
                        <div class="workflow-steps">
                            <div class="step {{#unless pageType}}active{{/unless}}">
                                <i class="fa fa-edit"></i> Registration
                            </div>
                            <div class="step {{#eq pageType 'confirmation'}}active{{/eq}}">
                                <i class="fa fa-check-circle"></i> Confirmation
                            </div>
                            <div class="step {{#eq pageType 'email'}}active{{/eq}}">
                                <i class="fa fa-envelope"></i> Email Config
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Canvas Area -->
        <div class="canvas-area">
            <div class="canvas" id="canvas">
                <div class="droppable-area" id="main-drop-area">
                    <i class="fa fa-plus-circle"></i><br>
                    Drag elements here to start building your registration page
                </div>
            </div>
        </div>
    </div>
    
    <!-- Save Controls -->
    <div class="save-controls">
        <button class="btn btn-info" id="preview-btn">
            <i class="fa fa-eye"></i> Preview
        </button>
        
        {{#if pageType}}
            {{#eq pageType 'confirmation'}}
                <button class="btn btn-warning" onclick="window.location.href='/event/online-registration/{{eventId}}/design-registration'">
                    <i class="fa fa-arrow-left"></i> Back to Registration
                </button>
                <button class="btn btn-success" id="save-next-btn">
                    <i class="fa fa-save"></i> Save & Next (Email Config)
                </button>
            {{/eq}}
            {{#eq pageType 'email'}}
                <button class="btn btn-warning" onclick="window.location.href='/event/online-registration/{{eventId}}/design-confirmation'">
                    <i class="fa fa-arrow-left"></i> Back to Confirmation
                </button>
                <button class="btn btn-success" id="generate-link-btn">
                    <i class="fa fa-link"></i> Generate Public Link
                </button>
            {{/eq}}
        {{else}}
            <button class="btn btn-success" id="save-next-btn">
                <i class="fa fa-save"></i> Save & Next (Confirmation)
            </button>
        {{/if}}
        
        <button class="btn btn-primary" id="save-btn">
            <i class="fa fa-save"></i> Save Draft
        </button>
        <button class="btn btn-secondary" onclick="window.location.href='/event/online-registration/{{eventId}}'">
            <i class="fa fa-times"></i> Exit Designer
        </button>
    </div>
    
    <!-- Properties Panel -->
    <div class="properties-panel" id="properties-panel">
        <h5>Element Properties</h5>
        <div id="properties-content">
            <!-- Properties will be loaded here -->
        </div>
        <button class="btn btn-primary btn-sm" id="apply-properties">Apply Changes</button>
        <button class="btn btn-secondary btn-sm" onclick="closePropertiesPanel()">Cancel</button>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        let selectedElement = null;
        let elementCounter = 0;
        
        $(document).ready(function() {
            initializeDesigner();
        });
        
        function initializeDesigner() {
            // Toggle component groups
            $('.component-group-header').click(function() {
                $(this).parent().toggleClass('active');
            });
            
            // Make components draggable
            $('.component-item').draggable({
                helper: 'clone',
                revert: 'invalid',
                start: function(event, ui) {
                    ui.helper.css('z-index', 1000);
                }
            });
            
            // Make canvas droppable
            $('#canvas').droppable({
                accept: '.component-item',
                drop: function(event, ui) {
                    addElement(ui.draggable.data('component'), ui.draggable, ui.position);
                }
            });
            
            // Save functionality
            $('#save-btn').click(saveDesign);
            $('#preview-btn').click(previewPage);
        }
        
        function addElement(componentType, source, position) {
            elementCounter++;
            let elementId = componentType + '_' + elementCounter;
            let element = createElementHTML(componentType, elementId, source);
            
            if (element) {
                // Remove the placeholder if it exists
                $('#main-drop-area').hide();
                
                // Add element to canvas
                $('#canvas').append(element);
                
                // Make element selectable and editable
                setupElementInteractions(elementId);
            }
        }
        
        function createElementHTML(type, id, source) {
            let html = '';
            
            switch(type) {
                case 'header':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="header">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <div class="page-header text-center">
                                <h1>{{event.eventName}}</h1>
                                <p class="lead">Event Registration</p>
                            </div>
                        </div>
                    `;
                    break;
                    
                case 'heading':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="heading">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <h2>Heading Text</h2>
                        </div>
                    `;
                    break;
                    
                case 'text':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="text">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <p>This is a text block. Click to edit the content.</p>
                        </div>
                    `;
                    break;
                    
                case 'image':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="image">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <img src="/images/logo.png" alt="Image" class="img-responsive" style="max-width: 200px;">
                        </div>
                    `;
                    break;
                    
                case 'form-start':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="form-start">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <form action="/event/register/{{event._id}}" method="POST" enctype="multipart/form-data">
                                <div class="form-header">
                                    <h3>Registration Form</h3>
                                    <p>Please fill in all required fields</p>
                                </div>
                        </div>
                    `;
                    break;
                    
                case 'form-field':
                    let fieldId = source.data('field-id');
                    let fieldType = source.data('field-type');
                    let fieldName = source.text().replace(/^\s*\S+\s*/, ''); // Remove icon
                    
                    html = `
                        <div class="canvas-element" id="${id}" data-type="form-field" data-field-id="${fieldId}">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <div class="form-group">
                                <label for="field_${fieldId}">${fieldName}</label>
                                ${generateFieldHTML(fieldType, fieldId, fieldName)}
                            </div>
                        </div>
                    `;
                    break;
                    
                case 'submit-button':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="submit-button">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <div class="form-group text-center">
                                <button type="submit" class="btn btn-primary btn-lg">Register Now</button>
                            </div>
                            </form>
                        </div>
                    `;
                    break;
                    
                case 'container':
                    html = `
                        <div class="canvas-element" id="${id}" data-type="container">
                            <div class="element-controls">
                                <button onclick="editElement('${id}')"><i class="fa fa-edit"></i></button>
                                <button onclick="deleteElement('${id}')"><i class="fa fa-trash"></i></button>
                            </div>
                            <div class="container">
                                <div class="droppable-area">Drop elements here</div>
                            </div>
                        </div>
                    `;
                    break;
                    
                default:
                    return null;
            }
            
            return $(html);
        }
        
        function generateFieldHTML(fieldType, fieldId, fieldName) {
            switch(fieldType) {
                case 'text':
                    return `<input type="text" class="form-control" name="field_${fieldId}" id="field_${fieldId}">`;
                case 'email':
                    return `<input type="email" class="form-control" name="field_${fieldId}" id="field_${fieldId}">`;
                case 'number':
                    return `<input type="number" class="form-control" name="field_${fieldId}" id="field_${fieldId}">`;
                case 'textarea':
                    return `<textarea class="form-control" name="field_${fieldId}" id="field_${fieldId}" rows="3"></textarea>`;
                case 'select':
                    return `<select class="form-control" name="field_${fieldId}" id="field_${fieldId}">
                                <option value="">Select an option</option>
                                <option value="option1">Option 1</option>
                                <option value="option2">Option 2</option>
                            </select>`;
                case 'date':
                    return `<input type="date" class="form-control" name="field_${fieldId}" id="field_${fieldId}">`;
                case 'file':
                    return `<input type="file" class="form-control" name="field_${fieldId}" id="field_${fieldId}">`;
                default:
                    return `<input type="text" class="form-control" name="field_${fieldId}" id="field_${fieldId}">`;
            }
        }
        
        function setupElementInteractions(elementId) {
            $(`#${elementId}`).click(function(e) {
                e.stopPropagation();
                selectElement(elementId);
            });
        }
        
        function selectElement(elementId) {
            $('.canvas-element').removeClass('selected');
            $(`#${elementId}`).addClass('selected');
            selectedElement = elementId;
        }
        
        function editElement(elementId) {
            selectElement(elementId);
            showPropertiesPanel(elementId);
        }
        
        function deleteElement(elementId) {
            if (confirm('Are you sure you want to delete this element?')) {
                $(`#${elementId}`).remove();
                closePropertiesPanel();
            }
        }
        
        function showPropertiesPanel(elementId) {
            let element = $(`#${elementId}`);
            let type = element.data('type');
            let content = generatePropertiesHTML(type, elementId);
            
            $('#properties-content').html(content);
            $('#properties-panel').show();
        }
        
        function closePropertiesPanel() {
            $('#properties-panel').hide();
            selectedElement = null;
        }
        
        function generatePropertiesHTML(type, elementId) {
            switch(type) {
                case 'heading':
                    let currentText = $(`#${elementId} h2`).text();
                    return `
                        <div class="form-group">
                            <label>Heading Text</label>
                            <input type="text" class="form-control" id="prop-text" value="${currentText}">
                        </div>
                        <div class="form-group">
                            <label>Heading Size</label>
                            <select class="form-control" id="prop-size">
                                <option value="h1">H1 - Largest</option>
                                <option value="h2" selected>H2 - Large</option>
                                <option value="h3">H3 - Medium</option>
                                <option value="h4">H4 - Small</option>
                            </select>
                        </div>
                    `;
                case 'text':
                    let textContent = $(`#${elementId} p`).text();
                    return `
                        <div class="form-group">
                            <label>Text Content</label>
                            <textarea class="form-control" id="prop-text" rows="4">${textContent}</textarea>
                        </div>
                    `;
                case 'image':
                    return `
                        <div class="form-group">
                            <label>Image URL</label>
                            <input type="text" class="form-control" id="prop-src" value="${$(`#${elementId} img`).attr('src')}">
                        </div>
                        <div class="form-group">
                            <label>Alt Text</label>
                            <input type="text" class="form-control" id="prop-alt" value="${$(`#${elementId} img`).attr('alt')}">
                        </div>
                    `;
                default:
                    return '<p>No properties available for this element.</p>';
            }
        }
        
        function saveDesign() {
            let design = $('#canvas').html();
            
            $.ajax({
                url: '/event/online-registration/{{eventId}}/save-design',
                method: 'POST',
                data: {
                    type: 'registration',
                    design: design
                },
                success: function(response) {
                    if (response.success) {
                        alert('Design saved successfully!');
                    } else {
                        alert('Error saving design: ' + response.error);
                    }
                },
                error: function() {
                    alert('Network error occurred while saving');
                }
            });
        }
        
        function previewPage() {
            let design = $('#canvas').html();
            let previewWindow = window.open('', '_blank');
            previewWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Registration Preview</title>
                    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/3.3.7/css/bootstrap.min.css">
                </head>
                <body>
                    <div class="container">
                        ${design}
                    </div>
                </body>
                </html>
            `);
        }
        
        // Apply properties changes
        $('#apply-properties').click(function() {
            if (!selectedElement) return;
            
            let element = $(`#${selectedElement}`);
            let type = element.data('type');
            
            switch(type) {
                case 'heading':
                    let text = $('#prop-text').val();
                    let size = $('#prop-size').val();
                    element.find('h1, h2, h3, h4').replaceWith(`<${size}>${text}</${size}>`);
                    break;
                case 'text':
                    element.find('p').text($('#prop-text').val());
                    break;
                case 'image':
                    element.find('img').attr('src', $('#prop-src').val()).attr('alt', $('#prop-alt').val());
                    break;
            }
            
            closePropertiesPanel();
        });
        
        // Close properties panel when clicking outside
        $(document).click(function(e) {
            if (!$(e.target).closest('#properties-panel, .canvas-element').length) {
                closePropertiesPanel();
            }
        });
        
        // Save & Next Workflow
        $('#save-next-btn').click(function() {
            let design = $('#canvas').html();
            let pageType = '{{pageType}}' || 'registration';
            let eventId = '{{eventId}}';
            
            $.ajax({
                url: `/event/online-registration/${eventId}/save-design`,
                method: 'POST',
                data: {
                    pageType: pageType,
                    pageContent: design,
                    nextStep: true
                },
                success: function(response) {
                    if (response.success) {
                        // Determine next step
                        let nextUrl;
                        if (pageType === 'registration' || !pageType) {
                            nextUrl = `/event/online-registration/${eventId}/design-confirmation`;
                        } else if (pageType === 'confirmation') {
                            nextUrl = `/event/online-registration/${eventId}/email-config`;
                        }
                        
                        if (nextUrl) {
                            alert('Page saved successfully! Moving to next step...');
                            window.location.href = nextUrl;
                        }
                    } else {
                        alert('Error saving design: ' + (response.message || 'Unknown error'));
                    }
                },
                error: function() {
                    alert('Error saving design. Please try again.');
                }
            });
        });
        
        // Generate Link functionality
        $('#generate-link-btn').click(function() {
            let eventId = '{{eventId}}';
            
            $.ajax({
                url: `/event/online-registration/${eventId}/generate-link`,
                method: 'POST',
                success: function(response) {
                    if (response.success && response.publicUrl) {
                        // Show the generated link
                        let fullUrl = window.location.origin + response.publicUrl;
                        
                        let linkHtml = `
                            <div class="alert alert-success">
                                <h4><i class="fa fa-link"></i> Public Registration Link Generated!</h4>
                                <p><strong>Your live registration page is ready:</strong></p>
                                <div style="background: #f8f9fa; padding: 10px; border-radius: 4px; margin: 10px 0;">
                                    <input type="text" value="${fullUrl}" readonly style="width: 100%; padding: 8px; border: 1px solid #ddd;" onclick="this.select()">
                                </div>
                                <p><small>
                                    <i class="fa fa-info-circle"></i> 
                                    This link includes your custom registration page, confirmation page, and email configuration.
                                    All assets (images, backgrounds) are saved in the event folder.
                                </small></p>
                                <button class="btn btn-primary" onclick="window.open('${fullUrl}', '_blank')">
                                    <i class="fa fa-external-link"></i> Open Registration Page
                                </button>
                                <button class="btn btn-info" onclick="navigator.clipboard.writeText('${fullUrl}').then(() => alert('Link copied to clipboard!'))">
                                    <i class="fa fa-copy"></i> Copy Link
                                </button>
                            </div>
                        `;
                        
                        // Show modal or replace canvas content
                        $('#canvas').html(linkHtml);
                    } else {
                        alert('Error generating link: ' + (response.message || 'Unknown error'));
                    }
                },
                error: function() {
                    alert('Error generating link. Please try again.');
                }
            });
        });
        
        // Preview functionality
        $('#preview-btn').click(function() {
            let design = $('#canvas').html();
            let previewWindow = window.open('', '_blank', 'width=800,height=600');
            
            let previewContent = `
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Preview - {{event.eventName}}</title>
                    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/3.3.7/css/bootstrap.min.css">
                    <style>
                        body { padding: 20px; background: #f5f5f5; }
                        .preview-container { background: white; padding: 40px; border-radius: 8px; }
                    </style>
                </head>
                <body>
                    <div class="preview-container">
                        ${design}
                    </div>
                </body>
                </html>
            `;
            
            previewWindow.document.write(previewContent);
            previewWindow.document.close();
        });
    </script>
</body>
</html>
{{/if}}
{{/if}}
